// /src/app/api/formularios-etapa/[etapaId]/route.ts

import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/dbConnect';
import FormularioEtapa from '@/models/FormularioEtapa';
import mongoose from 'mongoose';

// Endpoint para obtener un formulario por ID de etapa
export async function GET(
Â  req: NextRequest,
Â  // âœ… CORRECCIÃ“N: Usamos 'context' (o cualquier nombre) para el segundo argumento
Â  context: { params: { etapaId: string } } 
) {
Â  await dbConnect();

Â  try {
Â  Â  // Acceso al parÃ¡metro a travÃ©s del contexto
Â  Â  const { etapaId } = context.params;

Â  Â  if (!mongoose.Types.ObjectId.isValid(etapaId)) {
Â  Â  Â  return NextResponse.json(
Â  Â  Â  Â  { success: false, error: 'ID de etapa de formulario invÃ¡lido.' },
Â  Â  Â  Â  { status: 400 }
Â  Â  Â  );
Â  Â  }

Â  Â  // ðŸš¨ Importante: AquÃ­ debes usar 'etapaId' si ese es el nombre del campo en tu modelo FormularioEtapa.
Â  Â  const formulario = await FormularioEtapa.findOne({ etapaId: etapaId });

Â  Â  if (!formulario) {
Â  Â  Â  return NextResponse.json({ success: true, data: null });
Â  Â  }

Â  Â  return NextResponse.json({ success: true, data: formulario });
Â  } catch (error: unknown) {
Â  Â  console.error('Error en GET /api/formularios-etapa/[etapaId]:', error);
Â  Â  return NextResponse.json(
Â  Â  Â  { success: false, error: error instanceof Error ? error.message : 'Error interno del servidor.' },
Â  Â  Â  { status: 500 }
Â  Â  );
Â  }
}